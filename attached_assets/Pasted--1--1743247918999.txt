新产品设计文档 —— 用户登录、注册及抠图系统
1. 概述
本系统主要面向用户提供图片抠图核心功能，并结合用户账号体系，实现以下业务流程与功能：
- 用户认证
  - 用户可通过用户名和密码进行注册与登录（注册时需输入用户名及两次密码验证），注册成功后自动登录进入系统。
  - 除系统首页、登录页、注册页外，其余所有页面与后端接口均必须携带后端生成的 access token 进行身份验证。access token 内嵌有效期，支持过期、续期及登出机制，确保安全。
- 核心业务
  - 登录成功后，用户进入 Dashboard（抠图页面），可上传图片进行自动抠图处理。每次抠图需消耗 1 credit，若账户余额不足，则无法进行抠图操作。
  - 用户可在抠图历史详情页面查询自己所有的抠图记录，包括上传时间、原图、处理结果、消耗 credit 等信息。
- 充值与 Credit 兑换
  - 用户通过充值页面使用 Stripe 支付接口进行充值。充值金额按照一定比例转换为 credit（例如：1 元 = 10 credit，比例可配置）。
  - 充值成功后，用户账户中的 credit 余额会相应增加；充值历史记录页面展示每笔充值的详细信息（充值金额、获得的 credit 数量、支付状态等）。
- 后端技术
  - 后端使用 Python 开发（推荐 Flask），数据存储采用 MySQL。
  - 所有需要用户验证的接口均要求请求头中携带 access token，经后端验证后方可操作。

---
2. 系统模块及详细功能
2.1 用户认证模块
2.1.1 注册
- 页面：注册页
- 功能描述：
  - 用户输入用户名及两次密码（保证一致性）。
  - 后端验证用户名是否重复、密码是否满足规则（长度、复杂度要求）。
  - 注册成功后自动登录，系统生成 access token（含有效期信息）并进入 Dashboard 页面。
- 交互说明：
  - 前端保存 token（建议存储在 httpOnly Cookie 或安全的 localStorage），后续所有操作需携带 token。
2.1.2 登录
- 页面：登录页
- 功能描述：
  - 用户输入用户名和密码进行登录。
  - 后端验证成功后返回 access token 及有效期（例如 1 小时），登录成功后跳转至 Dashboard。
- 交互说明：
  - 前端在 token 过期前或检测到 token 失效时提醒用户续期或重新登录；可选实现 refresh token 机制。
2.1.3 Token 过期、续期与登出
- Token 过期：
  - 每个 access token 内嵌过期时间，超过有效期后自动失效。
  - 后端在所有需要登录的接口中，验证 token 是否存在及有效，若失效返回 401 Unauthorized 错误。
- Token 续期：
  - 可引入 refresh token 机制，在 access token 快过期时由前端主动调用续期接口，获取新的 token。
- 登出：
  - 用户点击登出后，前端清除 token；后端可将 token 标记为失效（例如加入黑名单），并返回系统首页。

---
2.2 登录后访问页面与接口（均需 access token 验证）
2.2.1 Dashboard（抠图页面）
- 页面：Dashboard
- 功能描述：
  - 用户登录后进入主要操作页面，上传图片进行抠图。
  - 显示实时抠图结果（例如：透明背景、边缘平滑处理等）。
- 交互说明：
  - 所有请求必须在 Header 中携带有效 access token，经后端验证后方可操作。
2.2.2 抠图历史详情页面
- 页面：抠图历史记录页
- 功能描述：
  - 显示用户所有抠图记录，每条记录包含上传时间、原图 URL、处理结果 URL、消耗 credit 数量等信息。
  - 支持分页、搜索、点击查看详细记录。
- 交互说明：
  - 用户请求时必须附带 access token，经后端验证后返回对应数据；若 token 失效，则返回错误提示。
2.2.3 用户充值页面（使用 Stripe）
- 页面：充值页
- 功能描述：
  - 用户在充值页面输入充值金额，通过 Stripe 支付接口发起支付请求。
  - 支付成功后，后端按设定比例将充值金额换算成 credit，并增加至用户账户余额。
  - 支付过程中确保对用户身份的验证，避免支付信息滥用。
- 交互说明：
  - 所有请求必须携带 access token，Stripe 支付回调通知也需进行用户身份校验。
2.2.4 用户充值历史记录页面
- 页面：充值历史记录页
- 功能描述：
  - 显示用户所有充值记录，每条记录包括充值时间、充值金额、获得的 credit 数量、支付方式与状态等。
  - 支持分页与筛选，方便用户查询特定记录。
- 交互说明：
  - 请求必须携带 access token，后端根据 token 返回当前用户的充值历史数据。

---
2.3 Credit 消费机制（充值与抠图关联）
2.3.1 充值兑换 Credit
- 规则说明：
  - 用户充值金额按固定比例转换为 credit，例如：1 元 = 10 credit（比例可配置）。
  - 充值成功后，系统更新用户账户中的 credit 余额，并记录充值明细。
2.3.2 抠图消耗 Credit
- 规则说明：
  - 每进行一次抠图操作需消耗 1 credit。
  - 系统在抠图接口中，首先检查用户的 credit 余额：
    - 如果余额 ≥ 1，则扣除 1 credit，继续进行抠图处理；
    - 如果余额不足，则返回错误提示，禁止抠图操作，并引导用户充值。

---
3. API 接口设计
除系统首页、登录、注册接口外，其他所有接口请求均要求在 HTTP 请求头中携带有效的 access token。以下是部分关键接口设计示例：
3.1 用户认证相关接口
- 注册接口
  - URL：POST /api/register
  - 请求参数：
{
  "username": "string",
  "password": "string",
  "confirm_password": "string"
}
  - 响应：
{
  "success": true,
  "token": "string",
  "user": { ... },
  "expires_in": 3600
}
- 登录接口
  - URL：POST /api/login
  - 请求参数：
{
  "username": "string",
  "password": "string"
}
  - 响应：
{
  "success": true,
  "token": "string",
  "user": { ... },
  "expires_in": 3600
}
- Token 续期接口（可选）
  - URL：POST /api/token/refresh
  - 请求参数：
{
  "refresh_token": "string"
}
  - 响应：
{
  "success": true,
  "token": "string",
  "expires_in": 3600
}
- 登出接口
  - URL：POST /api/logout
  - 请求参数：无（根据 access token 识别用户）
  - 响应：
{
  "success": true
}
3.2 抠图相关接口
- 抠图接口
  - URL：POST /api/matting
  - 请求参数：支持 multipart 表单提交
{
  "image": "file_data"
}
  - 业务流程：
    1. 验证请求头中的 access token。
    2. 查询用户 credit 余额：若余额 ≥ 1，则扣除 1 credit；若余额不足，则返回错误提示。
    3. 执行抠图处理，并存储处理结果到抠图历史记录中。
  - 响应（成功示例）：
{
  "success": true,
  "processed_image": "https://example.com/image.png",
  "remaining_credit": 49
}
  - 响应（余额不足示例）：
{
  "success": false,
  "message": "credit 余额不足，请充值后再进行抠图"
}
- 抠图历史记录接口
  - URL：GET /api/matting/history
  - 请求参数：分页参数（如 page、limit）
  - 响应：
{
  "success": true,
  "records": [
    {
      "time": "2025-03-29 10:00:00",
      "image_url": "https://example.com/original.png",
      "result_url": "https://example.com/processed.png",
      "credit_spent": 1
    },
    { ... }
  ],
  "pagination": { ... }
}
3.3 充值与 Credit 管理接口
- 充值接口（Stripe 支付 + credit 兑换）
  - URL：POST /api/recharge
  - 请求参数：
{
  "amount": 10,
  "payment_method": "stripe"
}
  - 业务流程：
    1. 前端调用 Stripe API 发起支付请求，后端接收 Stripe 支付通知。
    2. 支付成功后，根据配置比例（例如 1 元 = 10 credit）计算用户应获得的 credit。
    3. 更新用户账户中的 credit 余额，并记录充值记录。
  - 响应示例：
{
  "success": true,
  "message": "充值成功",
  "credit_balance": 100
}
  - 验证要求：请求必须携带有效的 access token。
- 查询 Credit 余额接口
  - URL：GET /api/credit/balance
  - 请求参数：无
  - 响应示例：
{
  "success": true,
  "credit_balance": 50
}
  - 验证要求：请求必须携带 access token。
- 充值历史记录接口
  - URL：GET /api/recharge/history
  - 请求参数：分页参数（可选）
  - 响应示例：
{
  "success": true,
  "records": [
    {
      "time": "2025-03-29 10:00:00",
      "amount": 10,
      "credit_gained": 100,
      "payment_status": "成功"
    },
    { ... }
  ],
  "pagination": { ... }
}
  - 验证要求：请求必须携带 access token。

---
4. 数据库设计
4.1 用户表（users）
暂时无法在Lark文档外展示此内容
4.2 充值记录表（recharge_history）
暂时无法在Lark文档外展示此内容
4.3 抠图记录表（matting_history）
暂时无法在Lark文档外展示此内容

---
5. 业务流程
5.1 用户流程
1. 访问首页
  - 未登录用户可查看系统简介与登录、注册入口（无需 token 验证）。
2. 注册/登录流程
  - 用户注册或登录成功后，系统返回 access token，前端保存 token 并自动跳转至 Dashboard。
  - 后续所有操作页面均在请求时携带 token，后端验证 token 合法性后执行操作。
3. 核心操作流程
  - 抠图操作
    - 用户在 Dashboard 上传图片，系统首先检查用户 credit 余额；若余额 ≥ 1，则扣除 1 credit 后进行抠图处理，结果存入抠图历史记录；若余额不足，则提示用户充值。
  - 充值操作
    - 用户在充值页面输入充值金额，前端调用 Stripe 支付接口发起支付请求；支付成功后，后端根据配置比例兑换相应 credit 并更新用户余额，同时记录充值明细。
  - 历史记录查询
    - 用户可分别查询自己的抠图历史与充值历史，前端请求均需携带 token，后端返回对应数据。
4. 登出流程
  - 用户点击登出，前端清除 token，后端标记 token 失效，返回系统首页。

---
5. 前端与后端设计要点
6.1 前端设计
- 安全性
  - 除首页、登录、注册页外，所有页面均要求用户登录状态；
  - 前端需检测 token 是否存在及有效，若失效引导用户重新登录或调用续期接口。
- 用户体验
  - 各页面提供明确提示和操作反馈；
  - Dashboard 显示当前 credit 余额；余额不足时禁用抠图按钮，并提供充值入口；
  - 充值页面集成 Stripe 支付流程，确保用户支付顺畅并及时更新余额。
6.2 后端设计
- 技术栈
  - 使用 Python（Flask 或 Django）开发 RESTful API，MySQL 作为数据存储后端。
- 安全性
  - 密码采用哈希存储；所有接口采用 HTTPS 传输；
  - 关键接口（抠图、充值、查询历史）在执行前必须验证 access token。
- 支付集成
  - 集成 Stripe 支付 API，处理支付请求与异步通知，并在通知中验证用户身份，确保支付信息安全。

---
6. 非功能需求
- 性能
  - 核心抠图功能采用高性能图像处理算法，确保响应迅速；
  - 所有需要 token 验证的接口需在高并发下保持稳定与安全。
- 可扩展性
  - 模块化设计便于未来扩展新功能，如社交分享、模板管理等。
- 可维护性
  - 详细的代码与文档记录，自动化测试和持续集成保障系统稳定性。
- 安全性
  - 严格遵循数据保护规范，防范 SQL 注入、XSS、CSRF 等常见攻击；
  - 通过 access token 验证确保所有敏感操作均在登录状态下进行，并支持 token 过期、续期与登出机制；
  - Stripe 支付集成确保支付过程和充值记录数据完整安全。

---
7. 开发与上线计划
8. 需求确认
  - 与产品、设计、运营团队确认详细需求及用户场景。
9. 原型设计
  - 绘制各页面线框图与高保真原型，确定前后端接口、 token 机制和支付流程。
10. 开发阶段
  - 前端与后端并行开发。后端采用 Python 框架（Flask）开发 API，MySQL 进行数据存储；
  - 集成 Stripe 支付接口与支付通知处理，所有需要登录的接口均要求 token 验证。
11. 内部测试
  - 完整测试功能、性能与安全性，特别验证 token 续期、充值、credit 消耗与支付流程。
12. 上线部署
  - 部署至生产环境，建立监控和日志系统，并根据用户反馈持续优化更新。

---
13. 结论
本产品设计文档详细描述了用户认证、图片抠图、充值换算 credit 机制、支付流程与历史记录管理等关键功能，并对所有需要用户登录的页面和接口均要求 access token 验证。通过集成 Stripe 支付、设置合理的 credit 消耗规则，系统既保障了用户操作的安全性，也实现了明确的盈利模式。后端采用 Python 与 MySQL 构建，前端和后端协同开发，确保整体系统的高效、稳定与安全。