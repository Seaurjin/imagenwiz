"""
Script to dynamically create and run a Flask migration to add all languages

This script:
1. Connects to PostgreSQL to get all languages
2. Creates a temporary migration file
3. Runs the migration using Flask-Migrate
"""

import os
import sys
import psycopg2
import psycopg2.extras
import tempfile
import subprocess
import json
import time
from datetime import datetime

# PostgreSQL connection details
PG_HOST = os.environ.get('PGHOST')
PG_PORT = os.environ.get('PGPORT')
PG_DATABASE = os.environ.get('PGDATABASE')
PG_USER = os.environ.get('PGUSER')
PG_PASSWORD = os.environ.get('PGPASSWORD')

def connect_postgres():
    """Connect to PostgreSQL database"""
    try:
        conn = psycopg2.connect(
            host=PG_HOST,
            port=PG_PORT,
            database=PG_DATABASE,
            user=PG_USER,
            password=PG_PASSWORD
        )
        print(f"✅ Connected to PostgreSQL: {PG_HOST}:{PG_PORT}/{PG_DATABASE}")
        return conn
    except Exception as e:
        print(f"❌ Failed to connect to PostgreSQL: {str(e)}")
        sys.exit(1)

def get_languages_from_postgres(pg_conn):
    """Get all languages from PostgreSQL"""
    cursor = pg_conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
    
    try:
        # Get all active languages
        cursor.execute("""
            SELECT code, name, is_active, is_default
            FROM cms_languages
            WHERE is_active = true
        """)
        
        languages = cursor.fetchall()
        print(f"Found {len(languages)} active languages in PostgreSQL")
        
        # Convert to list of dictionaries
        lang_list = []
        for lang in languages:
            lang_list.append({
                'code': lang['code'],
                'name': lang['name'],
                'is_active': bool(lang['is_active']),
                'is_default': bool(lang['is_default'])
            })
        
        return lang_list
    
    except Exception as e:
        print(f"❌ Error fetching languages: {str(e)}")
        return []
    
    finally:
        cursor.close()

def create_migration_script(languages):
    """Create a temporary migration script file with language data"""
    
    # Create language insert data with RTL flags and flag emojis
    language_data = []
    for lang in languages:
        code = lang['code']
        
        # Set RTL flag for known RTL languages
        is_rtl = True if code in ['ar', 'he', 'fa', 'ur'] else False
        
        # Set flag emoji based on language code
        flag = None
        if code == 'en': flag = '🇬🇧'
        elif code == 'fr': flag = '🇫🇷'
        elif code == 'es': flag = '🇪🇸'
        elif code == 'de': flag = '🇩🇪'
        elif code == 'zh-TW': flag = '🇹🇼'
        elif code == 'it': flag = '🇮🇹'
        elif code == 'ja': flag = '🇯🇵'
        elif code == 'ko': flag = '🇰🇷'
        elif code == 'pt': flag = '🇵🇹'
        elif code == 'ru': flag = '🇷🇺'
        elif code == 'ar': flag = '🇸🇦'
        elif code == 'nl': flag = '🇳🇱'
        elif code == 'sv': flag = '🇸🇪'
        elif code == 'pl': flag = '🇵🇱'
        elif code == 'tr': flag = '🇹🇷'
        elif code == 'hu': flag = '🇭🇺'
        elif code == 'no': flag = '🇳🇴'
        elif code == 'th': flag = '🇹🇭'
        elif code == 'vi': flag = '🇻🇳'
        elif code == 'id': flag = '🇮🇩'
        elif code == 'ms': flag = '🇲🇾'
        elif code == 'el': flag = '🇬🇷'
        
        language_data.append({
            'code': code,
            'name': lang['name'],
            'is_active': lang['is_active'],
            'is_default': lang['is_default'],
            'is_rtl': is_rtl,
            'flag': flag
        })
    
    # Create a temporary SQL file
    sql_script = """
-- Direct SQL script to insert all CMS languages
-- Generated by add_cms_languages.py

-- Make sure we have all the necessary columns
SELECT 
    CASE WHEN COUNT(*) = 0 THEN
        -- If is_rtl column doesn't exist, add it
        ALTER TABLE cms_languages ADD COLUMN is_rtl BOOLEAN NOT NULL DEFAULT FALSE;
    ELSE
        SELECT 1;
    END
FROM information_schema.columns 
WHERE table_name = 'cms_languages' AND column_name = 'is_rtl';

SELECT 
    CASE WHEN COUNT(*) = 0 THEN
        -- If flag column doesn't exist, add it
        ALTER TABLE cms_languages ADD COLUMN flag VARCHAR(10);
    ELSE
        SELECT 1;
    END
FROM information_schema.columns 
WHERE table_name = 'cms_languages' AND column_name = 'flag';

-- Insert or update each language
"""
    
    # Add SQL operations for each language
    for lang in language_data:
        code = lang['code']
        name = lang['name']
        is_active = 1 if lang['is_active'] else 0
        is_default = 1 if lang['is_default'] else 0
        is_rtl = 1 if lang['is_rtl'] else 0
        flag = f"'{lang['flag']}'" if lang['flag'] else "NULL"
        
        sql_script += f"""
-- Language: {code} - {name}
INSERT INTO cms_languages (code, name, is_active, is_default, is_rtl, flag)
VALUES ('{code}', '{name}', {is_active}, {is_default}, {is_rtl}, {flag})
ON DUPLICATE KEY UPDATE 
    name = '{name}',
    is_active = {is_active},
    is_default = {is_default},
    is_rtl = {is_rtl},
    flag = {flag};
"""
    
    # Write to temporary file
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.sql', mode='w')
    temp_file.write(sql_script)
    temp_file.close()
    
    print(f"Created SQL migration script at {temp_file.name}")
    
    return temp_file.name

def run_sql_file(sql_file):
    """Run SQL file using the MySQL client"""
    
    try:
        # Try running the SQL file using the CLI
        command = [
            'mysql',
            '-h', '8.130.113.102',
            '-u', 'root',
            '-pIr%2586241992',
            'mat_db',
            '-e', f"source {sql_file}"
        ]
        
        print("Running SQL migration...")
        
        result = subprocess.run(
            command,
            capture_output=True,
            text=True
        )
        
        if result.returncode == 0:
            print("✅ SQL migration executed successfully")
            return True
        else:
            print(f"❌ Error executing SQL migration: {result.stderr}")
            
            # Try with curl request to a custom API endpoint
            print("Trying alternative approach: uploading SQL file content...")
            
            with open(sql_file, 'r') as f:
                sql_content = f.read()
            
            # Make a curl request to upload the SQL file
            curl_command = [
                'curl',
                '-X', 'POST',
                'http://localhost:5000/api/cms/run-sql',
                '-H', 'Content-Type: application/json',
                '-d', json.dumps({'sql': sql_content})
            ]
            
            curl_result = subprocess.run(
                curl_command,
                capture_output=True,
                text=True
            )
            
            if curl_result.returncode == 0 and "error" not in curl_result.stdout.lower():
                print("✅ SQL migration executed successfully via API")
                return True
            else:
                print(f"❌ Error executing SQL migration via API: {curl_result.stderr if curl_result.stderr else curl_result.stdout}")
                return False
            
    except Exception as e:
        print(f"❌ Error executing SQL migration: {str(e)}")
        return False
    finally:
        # Clean up the temporary file
        try:
            os.unlink(sql_file)
            print(f"Deleted temporary SQL file: {sql_file}")
        except Exception as e:
            print(f"Warning: Could not delete temporary file {sql_file}: {str(e)}")

def add_languages():
    """Main function to add languages"""
    print("Starting language migration...")
    
    # Connect to PostgreSQL
    pg_conn = connect_postgres()
    
    try:
        # Get languages from PostgreSQL
        languages = get_languages_from_postgres(pg_conn)
        
        if not languages:
            print("❌ No languages found in PostgreSQL. Migration aborted.")
            return
        
        # Create migration script
        sql_file = create_migration_script(languages)
        
        # Run migration
        if run_sql_file(sql_file):
            print("\n✅ Languages migration completed successfully.")
        else:
            print("\n❌ Languages migration failed.")
    
    except Exception as e:
        print(f"❌ Error during migration: {str(e)}")
        import traceback
        traceback.print_exc()
    
    finally:
        # Close PostgreSQL connection
        pg_conn.close()

if __name__ == "__main__":
    add_languages()